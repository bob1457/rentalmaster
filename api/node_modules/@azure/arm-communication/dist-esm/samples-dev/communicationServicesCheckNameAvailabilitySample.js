/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CommunicationServiceManagementClient } from "@azure/arm-communication";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Checks that the CommunicationService name is valid and is not already in use.
 *
 * @summary Checks that the CommunicationService name is valid and is not already in use.
 * x-ms-original-file: specification/communication/resource-manager/Microsoft.Communication/stable/2023-03-31/examples/communicationServices/checkNameAvailabilityAvailable.json
 */
function checkNameAvailabilityAvailable() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMMUNICATION_SUBSCRIPTION_ID"] ||
            "11112222-3333-4444-5555-666677778888";
        const nameAvailabilityParameters = {
            name: "MyCommunicationService",
            type: "Microsoft.Communication/CommunicationServices"
        };
        const credential = new DefaultAzureCredential();
        const client = new CommunicationServiceManagementClient(credential, subscriptionId);
        const result = yield client.communicationServices.checkNameAvailability(nameAvailabilityParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Checks that the CommunicationService name is valid and is not already in use.
 *
 * @summary Checks that the CommunicationService name is valid and is not already in use.
 * x-ms-original-file: specification/communication/resource-manager/Microsoft.Communication/stable/2023-03-31/examples/communicationServices/checkNameAvailabilityUnavailable.json
 */
function checkNameAvailabilityUnavailable() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMMUNICATION_SUBSCRIPTION_ID"] ||
            "11112222-3333-4444-5555-666677778888";
        const nameAvailabilityParameters = {
            name: "MyCommunicationService",
            type: "Microsoft.Communication/CommunicationServices"
        };
        const credential = new DefaultAzureCredential();
        const client = new CommunicationServiceManagementClient(credential, subscriptionId);
        const result = yield client.communicationServices.checkNameAvailability(nameAvailabilityParameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        checkNameAvailabilityAvailable();
        checkNameAvailabilityUnavailable();
    });
}
main().catch(console.error);
//# sourceMappingURL=communicationServicesCheckNameAvailabilitySample.js.map