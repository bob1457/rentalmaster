'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
exports.KnownCheckNameAvailabilityReason = void 0;
(function (KnownCheckNameAvailabilityReason) {
    /** Invalid */
    KnownCheckNameAvailabilityReason["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownCheckNameAvailabilityReason["AlreadyExists"] = "AlreadyExists";
})(exports.KnownCheckNameAvailabilityReason || (exports.KnownCheckNameAvailabilityReason = {}));
/** Known values of {@link CommunicationServicesProvisioningState} that the service accepts. */
exports.KnownCommunicationServicesProvisioningState = void 0;
(function (KnownCommunicationServicesProvisioningState) {
    /** Unknown */
    KnownCommunicationServicesProvisioningState["Unknown"] = "Unknown";
    /** Succeeded */
    KnownCommunicationServicesProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCommunicationServicesProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownCommunicationServicesProvisioningState["Canceled"] = "Canceled";
    /** Running */
    KnownCommunicationServicesProvisioningState["Running"] = "Running";
    /** Creating */
    KnownCommunicationServicesProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownCommunicationServicesProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownCommunicationServicesProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownCommunicationServicesProvisioningState["Moving"] = "Moving";
})(exports.KnownCommunicationServicesProvisioningState || (exports.KnownCommunicationServicesProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link DomainsProvisioningState} that the service accepts. */
exports.KnownDomainsProvisioningState = void 0;
(function (KnownDomainsProvisioningState) {
    /** Unknown */
    KnownDomainsProvisioningState["Unknown"] = "Unknown";
    /** Succeeded */
    KnownDomainsProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownDomainsProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownDomainsProvisioningState["Canceled"] = "Canceled";
    /** Running */
    KnownDomainsProvisioningState["Running"] = "Running";
    /** Creating */
    KnownDomainsProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownDomainsProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownDomainsProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownDomainsProvisioningState["Moving"] = "Moving";
})(exports.KnownDomainsProvisioningState || (exports.KnownDomainsProvisioningState = {}));
/** Known values of {@link DomainManagement} that the service accepts. */
exports.KnownDomainManagement = void 0;
(function (KnownDomainManagement) {
    /** AzureManaged */
    KnownDomainManagement["AzureManaged"] = "AzureManaged";
    /** CustomerManaged */
    KnownDomainManagement["CustomerManaged"] = "CustomerManaged";
    /** CustomerManagedInExchangeOnline */
    KnownDomainManagement["CustomerManagedInExchangeOnline"] = "CustomerManagedInExchangeOnline";
})(exports.KnownDomainManagement || (exports.KnownDomainManagement = {}));
/** Known values of {@link VerificationStatus} that the service accepts. */
exports.KnownVerificationStatus = void 0;
(function (KnownVerificationStatus) {
    /** NotStarted */
    KnownVerificationStatus["NotStarted"] = "NotStarted";
    /** VerificationRequested */
    KnownVerificationStatus["VerificationRequested"] = "VerificationRequested";
    /** VerificationInProgress */
    KnownVerificationStatus["VerificationInProgress"] = "VerificationInProgress";
    /** VerificationFailed */
    KnownVerificationStatus["VerificationFailed"] = "VerificationFailed";
    /** Verified */
    KnownVerificationStatus["Verified"] = "Verified";
    /** CancellationRequested */
    KnownVerificationStatus["CancellationRequested"] = "CancellationRequested";
})(exports.KnownVerificationStatus || (exports.KnownVerificationStatus = {}));
/** Known values of {@link UserEngagementTracking} that the service accepts. */
exports.KnownUserEngagementTracking = void 0;
(function (KnownUserEngagementTracking) {
    /** Disabled */
    KnownUserEngagementTracking["Disabled"] = "Disabled";
    /** Enabled */
    KnownUserEngagementTracking["Enabled"] = "Enabled";
})(exports.KnownUserEngagementTracking || (exports.KnownUserEngagementTracking = {}));
/** Known values of {@link VerificationType} that the service accepts. */
exports.KnownVerificationType = void 0;
(function (KnownVerificationType) {
    /** Domain */
    KnownVerificationType["Domain"] = "Domain";
    /** SPF */
    KnownVerificationType["SPF"] = "SPF";
    /** Dkim */
    KnownVerificationType["Dkim"] = "DKIM";
    /** Dkim2 */
    KnownVerificationType["Dkim2"] = "DKIM2";
    /** Dmarc */
    KnownVerificationType["Dmarc"] = "DMARC";
})(exports.KnownVerificationType || (exports.KnownVerificationType = {}));
/** Known values of {@link EmailServicesProvisioningState} that the service accepts. */
exports.KnownEmailServicesProvisioningState = void 0;
(function (KnownEmailServicesProvisioningState) {
    /** Unknown */
    KnownEmailServicesProvisioningState["Unknown"] = "Unknown";
    /** Succeeded */
    KnownEmailServicesProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownEmailServicesProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownEmailServicesProvisioningState["Canceled"] = "Canceled";
    /** Running */
    KnownEmailServicesProvisioningState["Running"] = "Running";
    /** Creating */
    KnownEmailServicesProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownEmailServicesProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownEmailServicesProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownEmailServicesProvisioningState["Moving"] = "Moving";
})(exports.KnownEmailServicesProvisioningState || (exports.KnownEmailServicesProvisioningState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Unknown */
    KnownProvisioningState["Unknown"] = "Unknown";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Running */
    KnownProvisioningState["Running"] = "Running";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const CheckNameAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResponse = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResponse",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkNotificationHubParameters = {
    type: {
        name: "Composite",
        className: "LinkNotificationHubParameters",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedNotificationHub = {
    type: {
        name: "Composite",
        className: "LinkedNotificationHub",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationServiceResourceList = {
    type: {
        name: "Composite",
        className: "CommunicationServiceResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommunicationServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const TaggedResource = {
    type: {
        name: "Composite",
        className: "TaggedResource",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const CommunicationServiceKeys = {
    type: {
        name: "Composite",
        className: "CommunicationServiceKeys",
        modelProperties: {
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            primaryConnectionString: {
                serializedName: "primaryConnectionString",
                type: {
                    name: "String"
                }
            },
            secondaryConnectionString: {
                serializedName: "secondaryConnectionString",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegenerateKeyParameters = {
    type: {
        name: "Composite",
        className: "RegenerateKeyParameters",
        modelProperties: {
            keyType: {
                serializedName: "keyType",
                type: {
                    name: "Enum",
                    allowedValues: ["Primary", "Secondary"]
                }
            }
        }
    }
};
const DomainPropertiesVerificationStates = {
    type: {
        name: "Composite",
        className: "DomainPropertiesVerificationStates",
        modelProperties: {
            domain: {
                serializedName: "Domain",
                type: {
                    name: "Composite",
                    className: "VerificationStatusRecord"
                }
            },
            spf: {
                serializedName: "SPF",
                type: {
                    name: "Composite",
                    className: "VerificationStatusRecord"
                }
            },
            dkim: {
                serializedName: "DKIM",
                type: {
                    name: "Composite",
                    className: "VerificationStatusRecord"
                }
            },
            dkim2: {
                serializedName: "DKIM2",
                type: {
                    name: "Composite",
                    className: "VerificationStatusRecord"
                }
            },
            dmarc: {
                serializedName: "DMARC",
                type: {
                    name: "Composite",
                    className: "VerificationStatusRecord"
                }
            }
        }
    }
};
const VerificationStatusRecord = {
    type: {
        name: "Composite",
        className: "VerificationStatusRecord",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainPropertiesVerificationRecords = {
    type: {
        name: "Composite",
        className: "DomainPropertiesVerificationRecords",
        modelProperties: {
            domain: {
                serializedName: "Domain",
                type: {
                    name: "Composite",
                    className: "DnsRecord"
                }
            },
            spf: {
                serializedName: "SPF",
                type: {
                    name: "Composite",
                    className: "DnsRecord"
                }
            },
            dkim: {
                serializedName: "DKIM",
                type: {
                    name: "Composite",
                    className: "DnsRecord"
                }
            },
            dkim2: {
                serializedName: "DKIM2",
                type: {
                    name: "Composite",
                    className: "DnsRecord"
                }
            },
            dmarc: {
                serializedName: "DMARC",
                type: {
                    name: "Composite",
                    className: "DnsRecord"
                }
            }
        }
    }
};
const DnsRecord = {
    type: {
        name: "Composite",
        className: "DnsRecord",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ttl: {
                serializedName: "ttl",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DomainResourceList = {
    type: {
        name: "Composite",
        className: "DomainResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DomainResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VerificationParameter = {
    type: {
        name: "Composite",
        className: "VerificationParameter",
        modelProperties: {
            verificationType: {
                serializedName: "verificationType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailServiceResourceList = {
    type: {
        name: "Composite",
        className: "EmailServiceResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EmailServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SenderUsernameResourceCollection = {
    type: {
        name: "Composite",
        className: "SenderUsernameResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SenderUsernameResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "NameAvailabilityParameters",
        modelProperties: Object.assign({}, CheckNameAvailabilityRequest.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const CommunicationServiceResourceUpdate = {
    type: {
        name: "Composite",
        className: "CommunicationServiceResourceUpdate",
        modelProperties: Object.assign(Object.assign({}, TaggedResource.type.modelProperties), { linkedDomains: {
                serializedName: "properties.linkedDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const UpdateDomainRequestParameters = {
    type: {
        name: "Composite",
        className: "UpdateDomainRequestParameters",
        modelProperties: Object.assign(Object.assign({}, TaggedResource.type.modelProperties), { userEngagementTracking: {
                serializedName: "properties.userEngagementTracking",
                type: {
                    name: "String"
                }
            } })
    }
};
const EmailServiceResourceUpdate = {
    type: {
        name: "Composite",
        className: "EmailServiceResourceUpdate",
        modelProperties: Object.assign({}, TaggedResource.type.modelProperties)
    }
};
const CommunicationServiceResource = {
    type: {
        name: "Composite",
        className: "CommunicationServiceResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataLocation: {
                serializedName: "properties.dataLocation",
                type: {
                    name: "String"
                }
            }, notificationHubId: {
                serializedName: "properties.notificationHubId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, immutableResourceId: {
                serializedName: "properties.immutableResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, linkedDomains: {
                serializedName: "properties.linkedDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const DomainResource = {
    type: {
        name: "Composite",
        className: "DomainResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataLocation: {
                serializedName: "properties.dataLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fromSenderDomain: {
                serializedName: "properties.fromSenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, mailFromSenderDomain: {
                serializedName: "properties.mailFromSenderDomain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainManagement: {
                serializedName: "properties.domainManagement",
                type: {
                    name: "String"
                }
            }, verificationStates: {
                serializedName: "properties.verificationStates",
                type: {
                    name: "Composite",
                    className: "DomainPropertiesVerificationStates"
                }
            }, verificationRecords: {
                serializedName: "properties.verificationRecords",
                type: {
                    name: "Composite",
                    className: "DomainPropertiesVerificationRecords"
                }
            }, userEngagementTracking: {
                serializedName: "properties.userEngagementTracking",
                type: {
                    name: "String"
                }
            } })
    }
};
const EmailServiceResource = {
    type: {
        name: "Composite",
        className: "EmailServiceResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataLocation: {
                serializedName: "properties.dataLocation",
                type: {
                    name: "String"
                }
            } })
    }
};
const SenderUsernameResource = {
    type: {
        name: "Composite",
        className: "SenderUsernameResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { dataLocation: {
                serializedName: "properties.dataLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "properties.username",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CommunicationServicesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "CommunicationServicesCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationServicesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "CommunicationServicesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DomainsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "DomainsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DomainsUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainsInitiateVerificationHeaders = {
    type: {
        name: "Composite",
        className: "DomainsInitiateVerificationHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainsCancelVerificationHeaders = {
    type: {
        name: "Composite",
        className: "DomainsCancelVerificationHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailServicesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "EmailServicesCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailServicesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "EmailServicesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailServicesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "EmailServicesUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
    CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
    LinkNotificationHubParameters: LinkNotificationHubParameters,
    LinkedNotificationHub: LinkedNotificationHub,
    CommunicationServiceResourceList: CommunicationServiceResourceList,
    Resource: Resource,
    SystemData: SystemData,
    TaggedResource: TaggedResource,
    CommunicationServiceKeys: CommunicationServiceKeys,
    RegenerateKeyParameters: RegenerateKeyParameters,
    DomainPropertiesVerificationStates: DomainPropertiesVerificationStates,
    VerificationStatusRecord: VerificationStatusRecord,
    DomainPropertiesVerificationRecords: DomainPropertiesVerificationRecords,
    DnsRecord: DnsRecord,
    DomainResourceList: DomainResourceList,
    VerificationParameter: VerificationParameter,
    EmailServiceResourceList: EmailServiceResourceList,
    SenderUsernameResourceCollection: SenderUsernameResourceCollection,
    NameAvailabilityParameters: NameAvailabilityParameters,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    CommunicationServiceResourceUpdate: CommunicationServiceResourceUpdate,
    UpdateDomainRequestParameters: UpdateDomainRequestParameters,
    EmailServiceResourceUpdate: EmailServiceResourceUpdate,
    CommunicationServiceResource: CommunicationServiceResource,
    DomainResource: DomainResource,
    EmailServiceResource: EmailServiceResource,
    SenderUsernameResource: SenderUsernameResource,
    CommunicationServicesCreateOrUpdateHeaders: CommunicationServicesCreateOrUpdateHeaders,
    CommunicationServicesDeleteHeaders: CommunicationServicesDeleteHeaders,
    DomainsCreateOrUpdateHeaders: DomainsCreateOrUpdateHeaders,
    DomainsDeleteHeaders: DomainsDeleteHeaders,
    DomainsUpdateHeaders: DomainsUpdateHeaders,
    DomainsInitiateVerificationHeaders: DomainsInitiateVerificationHeaders,
    DomainsCancelVerificationHeaders: DomainsCancelVerificationHeaders,
    EmailServicesCreateOrUpdateHeaders: EmailServicesCreateOrUpdateHeaders,
    EmailServicesDeleteHeaders: EmailServicesDeleteHeaders,
    EmailServicesUpdateHeaders: EmailServicesUpdateHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-03-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const nameAvailabilityParameters = {
    parameterPath: "nameAvailabilityParameters",
    mapper: NameAvailabilityParameters
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const linkNotificationHubParameters = {
    parameterPath: ["options", "linkNotificationHubParameters"],
    mapper: LinkNotificationHubParameters
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const communicationServiceName = {
    parameterPath: "communicationServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]+$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "communicationServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: CommunicationServiceResourceUpdate
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: CommunicationServiceResource
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: RegenerateKeyParameters
};
const emailServiceName = {
    parameterPath: "emailServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]+$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "emailServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const domainName = {
    parameterPath: "domainName",
    mapper: {
        constraints: {
            MaxLength: 253,
            MinLength: 1
        },
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: DomainResource
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: UpdateDomainRequestParameters
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: VerificationParameter
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: EmailServiceResource
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: EmailServiceResourceUpdate
};
const senderUsername = {
    parameterPath: "senderUsername",
    mapper: {
        constraints: {
            MaxLength: 253,
            MinLength: 1
        },
        serializedName: "senderUsername",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: SenderUsernameResource
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.Communication provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.Communication provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Communication/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CommunicationServices operations. */
class CommunicationServicesImpl {
    /**
     * Initialize a new instance of the class CommunicationServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Checks that the CommunicationService name is valid and is not already in use.
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    checkNameAvailability(nameAvailabilityParameters, options) {
        return this.client.sendOperationRequest({ nameAvailabilityParameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Links an Azure Notification Hub to this communication service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    linkNotificationHub(resourceGroupName, communicationServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, communicationServiceName, options }, linkNotificationHubOperationSpec);
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$1);
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Operation to update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    update(resourceGroupName, communicationServiceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, communicationServiceName, parameters, options }, updateOperationSpec$2);
    }
    /**
     * Get the CommunicationService and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, communicationServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, communicationServiceName, options }, getOperationSpec$3);
    }
    /**
     * Create a new CommunicationService or update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, communicationServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    communicationServiceName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new CommunicationService or update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, communicationServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, communicationServiceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, communicationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, communicationServiceName, options },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, communicationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, communicationServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get the access keys of the CommunicationService resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, communicationServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, communicationServiceName, options }, listKeysOperationSpec);
    }
    /**
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
     * same time.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameter that describes the Regenerate Key Operation.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName, communicationServiceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, communicationServiceName, parameters, options }, regenerateKeyOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec$1);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: nameAvailabilityParameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const linkNotificationHubOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/linkNotificationHub",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LinkedNotificationHub
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: linkNotificationHubParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listBySubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResource
        },
        201: {
            bodyMapper: CommunicationServiceResource
        },
        202: {
            bodyMapper: CommunicationServiceResource
        },
        204: {
            bodyMapper: CommunicationServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CommunicationServiceKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const regenerateKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/regenerateKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CommunicationServiceKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        communicationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listBySubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Domains operations. */
class DomainsImpl {
    /**
     * Initialize a new instance of the class Domains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all Domains resources under the parent EmailServices resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    listByEmailServiceResource(resourceGroupName, emailServiceName, options) {
        const iter = this.listByEmailServiceResourcePagingAll(resourceGroupName, emailServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByEmailServiceResourcePagingPage(resourceGroupName, emailServiceName, options, settings);
            }
        };
    }
    listByEmailServiceResourcePagingPage(resourceGroupName, emailServiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByEmailServiceResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByEmailServiceResource(resourceGroupName, emailServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByEmailServiceResourceNext(resourceGroupName, emailServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByEmailServiceResourcePagingAll(resourceGroupName, emailServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByEmailServiceResourcePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByEmailServiceResourcePagingPage(resourceGroupName, emailServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Domains resource and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, emailServiceName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, domainName, options }, getOperationSpec$2);
    }
    /**
     * Add a new Domains resource under the parent EmailService resource or update an existing Domains
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    emailServiceName,
                    domainName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Add a new Domains resource under the parent EmailService resource or update an existing Domains
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, emailServiceName, domainName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, emailServiceName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, emailServiceName, domainName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, emailServiceName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, emailServiceName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an existing Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    emailServiceName,
                    domainName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an existing Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, emailServiceName, domainName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all Domains resources under the parent EmailServices resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    _listByEmailServiceResource(resourceGroupName, emailServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, options }, listByEmailServiceResourceOperationSpec);
    }
    /**
     * Initiate verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be initiated.
     * @param options The options parameters.
     */
    beginInitiateVerification(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    emailServiceName,
                    domainName,
                    parameters,
                    options
                },
                spec: initiateVerificationOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Initiate verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be initiated.
     * @param options The options parameters.
     */
    beginInitiateVerificationAndWait(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginInitiateVerification(resourceGroupName, emailServiceName, domainName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Cancel verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be canceled.
     * @param options The options parameters.
     */
    beginCancelVerification(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    emailServiceName,
                    domainName,
                    parameters,
                    options
                },
                spec: cancelVerificationOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Cancel verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be canceled.
     * @param options The options parameters.
     */
    beginCancelVerificationAndWait(resourceGroupName, emailServiceName, domainName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCancelVerification(resourceGroupName, emailServiceName, domainName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByEmailServiceResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param nextLink The nextLink from the previous successful call to the ListByEmailServiceResource
     *                 method.
     * @param options The options parameters.
     */
    _listByEmailServiceResourceNext(resourceGroupName, emailServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, nextLink, options }, listByEmailServiceResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DomainResource
        },
        201: {
            bodyMapper: DomainResource
        },
        202: {
            bodyMapper: DomainResource
        },
        204: {
            bodyMapper: DomainResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DomainResource
        },
        201: {
            bodyMapper: DomainResource
        },
        202: {
            bodyMapper: DomainResource
        },
        204: {
            bodyMapper: DomainResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByEmailServiceResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const initiateVerificationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/initiateVerification",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: DomainsInitiateVerificationHeaders
        },
        201: {
            headersMapper: DomainsInitiateVerificationHeaders
        },
        202: {
            headersMapper: DomainsInitiateVerificationHeaders
        },
        204: {
            headersMapper: DomainsInitiateVerificationHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const cancelVerificationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/cancelVerification",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: DomainsCancelVerificationHeaders
        },
        201: {
            headersMapper: DomainsCancelVerificationHeaders
        },
        202: {
            headersMapper: DomainsCancelVerificationHeaders
        },
        204: {
            headersMapper: DomainsCancelVerificationHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByEmailServiceResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EmailServices operations. */
class EmailServicesImpl {
    /**
     * Initialize a new instance of the class EmailServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get the EmailService and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, emailServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, options }, getOperationSpec$1);
    }
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, emailServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, emailServiceName, parameters, options },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, emailServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, emailServiceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, emailServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, emailServiceName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, emailServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, emailServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, emailServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, emailServiceName, parameters, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, emailServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, emailServiceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get a list of domains that are fully verified in Exchange Online.
     * @param options The options parameters.
     */
    listVerifiedExchangeOnlineDomains(options) {
        return this.client.sendOperationRequest({ options }, listVerifiedExchangeOnlineDomainsOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmailServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EmailServiceResource
        },
        201: {
            bodyMapper: EmailServiceResource
        },
        202: {
            bodyMapper: EmailServiceResource
        },
        204: {
            bodyMapper: EmailServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: EmailServiceResource
        },
        201: {
            bodyMapper: EmailServiceResource
        },
        202: {
            bodyMapper: EmailServiceResource
        },
        204: {
            bodyMapper: EmailServiceResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/emailServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmailServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmailServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listVerifiedExchangeOnlineDomainsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/listVerifiedExchangeOnlineDomains",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Sequence", element: { type: { name: "String" } } }
            }
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmailServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmailServiceResourceList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SenderUsernames operations. */
class SenderUsernamesImpl {
    /**
     * Initialize a new instance of the class SenderUsernames class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all valid sender usernames for a domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    listByDomains(resourceGroupName, emailServiceName, domainName, options) {
        const iter = this.listByDomainsPagingAll(resourceGroupName, emailServiceName, domainName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDomainsPagingPage(resourceGroupName, emailServiceName, domainName, options, settings);
            }
        };
    }
    listByDomainsPagingPage(resourceGroupName, emailServiceName, domainName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByDomainsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByDomains(resourceGroupName, emailServiceName, domainName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByDomainsNext(resourceGroupName, emailServiceName, domainName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByDomainsPagingAll(resourceGroupName, emailServiceName, domainName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByDomainsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByDomainsPagingPage(resourceGroupName, emailServiceName, domainName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all valid sender usernames for a domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    _listByDomains(resourceGroupName, emailServiceName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, domainName, options }, listByDomainsOperationSpec);
    }
    /**
     * Get a valid sender username for a domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param options The options parameters.
     */
    get(resourceGroupName, emailServiceName, domainName, senderUsername, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            emailServiceName,
            domainName,
            senderUsername,
            options
        }, getOperationSpec);
    }
    /**
     * Add a new SenderUsername resource under the parent Domains resource or update an existing
     * SenderUsername resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, emailServiceName, domainName, senderUsername, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            emailServiceName,
            domainName,
            senderUsername,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Operation to delete a SenderUsernames resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param options The options parameters.
     */
    delete(resourceGroupName, emailServiceName, domainName, senderUsername, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            emailServiceName,
            domainName,
            senderUsername,
            options
        }, deleteOperationSpec);
    }
    /**
     * ListByDomainsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param nextLink The nextLink from the previous successful call to the ListByDomains method.
     * @param options The options parameters.
     */
    _listByDomainsNext(resourceGroupName, emailServiceName, domainName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, emailServiceName, domainName, nextLink, options }, listByDomainsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByDomainsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SenderUsernameResourceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SenderUsernameResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SenderUsernameResource
        },
        201: {
            bodyMapper: SenderUsernameResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername
    ],
    headerParameters: [accept],
    serializer
};
const listByDomainsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SenderUsernameResourceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        emailServiceName,
        domainName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class CommunicationServiceManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the CommunicationServiceManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-communication/4.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-03-31";
        this.operations = new OperationsImpl(this);
        this.communicationServices = new CommunicationServicesImpl(this);
        this.domains = new DomainsImpl(this);
        this.emailServices = new EmailServicesImpl(this);
        this.senderUsernames = new SenderUsernamesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.CommunicationServiceManagementClient = CommunicationServiceManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
