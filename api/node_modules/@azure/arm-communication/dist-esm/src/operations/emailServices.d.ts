import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EmailServices } from "../operationsInterfaces";
import { CommunicationServiceManagementClient } from "../communicationServiceManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { EmailServiceResource, EmailServicesListBySubscriptionOptionalParams, EmailServicesListByResourceGroupOptionalParams, EmailServicesGetOptionalParams, EmailServicesGetResponse, EmailServicesCreateOrUpdateOptionalParams, EmailServicesCreateOrUpdateResponse, EmailServicesDeleteOptionalParams, EmailServiceResourceUpdate, EmailServicesUpdateOptionalParams, EmailServicesUpdateResponse, EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams, EmailServicesListVerifiedExchangeOnlineDomainsResponse } from "../models";
/** Class containing EmailServices operations. */
export declare class EmailServicesImpl implements EmailServices {
    private readonly client;
    /**
     * Initialize a new instance of the class EmailServices class.
     * @param client Reference to the service client
     */
    constructor(client: CommunicationServiceManagementClient);
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: EmailServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<EmailServiceResource>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: EmailServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<EmailServiceResource>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Get the EmailService and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, emailServiceName: string, options?: EmailServicesGetOptionalParams): Promise<EmailServicesGetResponse>;
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResource, options?: EmailServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<EmailServicesCreateOrUpdateResponse>, EmailServicesCreateOrUpdateResponse>>;
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResource, options?: EmailServicesCreateOrUpdateOptionalParams): Promise<EmailServicesCreateOrUpdateResponse>;
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, emailServiceName: string, options?: EmailServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, emailServiceName: string, options?: EmailServicesDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResourceUpdate, options?: EmailServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<EmailServicesUpdateResponse>, EmailServicesUpdateResponse>>;
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResourceUpdate, options?: EmailServicesUpdateOptionalParams): Promise<EmailServicesUpdateResponse>;
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Get a list of domains that are fully verified in Exchange Online.
     * @param options The options parameters.
     */
    listVerifiedExchangeOnlineDomains(options?: EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams): Promise<EmailServicesListVerifiedExchangeOnlineDomainsResponse>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=emailServices.d.ts.map