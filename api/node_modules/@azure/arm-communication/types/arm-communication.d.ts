import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type CheckNameAvailabilityReason = string;

/** The check availability request body. */
export declare interface CheckNameAvailabilityRequest {
    /** The name of the resource for which availability needs to be checked. */
    name?: string;
    /** The resource type. */
    type?: string;
}

/** The check availability result. */
export declare interface CheckNameAvailabilityResponse {
    /** Indicates if the resource name is available. */
    nameAvailable?: boolean;
    /** The reason why the given name is not available. */
    reason?: CheckNameAvailabilityReason;
    /** Detailed reason why the given name is available. */
    message?: string;
}

/** A class representing the access keys of a CommunicationService. */
export declare interface CommunicationServiceKeys {
    /** The primary access key. */
    primaryKey?: string;
    /** The secondary access key. */
    secondaryKey?: string;
    /** CommunicationService connection string constructed via the primaryKey */
    primaryConnectionString?: string;
    /** CommunicationService connection string constructed via the secondaryKey */
    secondaryConnectionString?: string;
}

export declare class CommunicationServiceManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the CommunicationServiceManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: CommunicationServiceManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    communicationServices: CommunicationServices;
    domains: Domains;
    emailServices: EmailServices;
    senderUsernames: SenderUsernames;
}

/** Optional parameters. */
export declare interface CommunicationServiceManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** A class representing a CommunicationService resource. */
export declare interface CommunicationServiceResource extends TrackedResource {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: CommunicationServicesProvisioningState;
    /**
     * FQDN of the CommunicationService instance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /** The location where the communication service stores its data at rest. */
    dataLocation?: string;
    /**
     * Resource ID of an Azure Notification Hub linked to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notificationHubId?: string;
    /**
     * Version of the CommunicationService resource. Probably you need the same or higher version of client SDKs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The immutable resource Id of the communication service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly immutableResourceId?: string;
    /** List of email Domain resource Ids. */
    linkedDomains?: string[];
}

/** Object that includes an array of CommunicationServices and a possible link for next set. */
export declare interface CommunicationServiceResourceList {
    /** List of CommunicationService */
    value?: CommunicationServiceResource[];
    /**
     * The URL the client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** A class representing update parameters for CommunicationService resource. */
export declare interface CommunicationServiceResourceUpdate extends TaggedResource {
    /** List of email Domain resource Ids. */
    linkedDomains?: string[];
}

/** Interface representing a CommunicationServices. */
export declare interface CommunicationServices {
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: CommunicationServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<CommunicationServiceResource>;
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CommunicationServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<CommunicationServiceResource>;
    /**
     * Checks that the CommunicationService name is valid and is not already in use.
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    checkNameAvailability(nameAvailabilityParameters: NameAvailabilityParameters, options?: CommunicationServicesCheckNameAvailabilityOptionalParams): Promise<CommunicationServicesCheckNameAvailabilityResponse>;
    /**
     * Links an Azure Notification Hub to this communication service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    linkNotificationHub(resourceGroupName: string, communicationServiceName: string, options?: CommunicationServicesLinkNotificationHubOptionalParams): Promise<CommunicationServicesLinkNotificationHubResponse>;
    /**
     * Operation to update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    update(resourceGroupName: string, communicationServiceName: string, parameters: CommunicationServiceResourceUpdate, options?: CommunicationServicesUpdateOptionalParams): Promise<CommunicationServicesUpdateResponse>;
    /**
     * Get the CommunicationService and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, communicationServiceName: string, options?: CommunicationServicesGetOptionalParams): Promise<CommunicationServicesGetResponse>;
    /**
     * Create a new CommunicationService or update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, communicationServiceName: string, parameters: CommunicationServiceResource, options?: CommunicationServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CommunicationServicesCreateOrUpdateResponse>, CommunicationServicesCreateOrUpdateResponse>>;
    /**
     * Create a new CommunicationService or update an existing CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, communicationServiceName: string, parameters: CommunicationServiceResource, options?: CommunicationServicesCreateOrUpdateOptionalParams): Promise<CommunicationServicesCreateOrUpdateResponse>;
    /**
     * Operation to delete a CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, communicationServiceName: string, options?: CommunicationServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Operation to delete a CommunicationService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, communicationServiceName: string, options?: CommunicationServicesDeleteOptionalParams): Promise<void>;
    /**
     * Get the access keys of the CommunicationService resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, communicationServiceName: string, options?: CommunicationServicesListKeysOptionalParams): Promise<CommunicationServicesListKeysResponse>;
    /**
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
     * same time.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameter that describes the Regenerate Key Operation.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, communicationServiceName: string, parameters: RegenerateKeyParameters, options?: CommunicationServicesRegenerateKeyOptionalParams): Promise<CommunicationServicesRegenerateKeyResponse>;
}

/** Optional parameters. */
export declare interface CommunicationServicesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type CommunicationServicesCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** Defines headers for CommunicationServices_createOrUpdate operation. */
export declare interface CommunicationServicesCreateOrUpdateHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface CommunicationServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CommunicationServicesCreateOrUpdateResponse = CommunicationServiceResource;

/** Defines headers for CommunicationServices_delete operation. */
export declare interface CommunicationServicesDeleteHeaders {
    /** URL to query for status of the operation. */
    location?: string;
}

/** Optional parameters. */
export declare interface CommunicationServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CommunicationServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CommunicationServicesGetResponse = CommunicationServiceResource;

/** Optional parameters. */
export declare interface CommunicationServicesLinkNotificationHubOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to the operation. */
    linkNotificationHubParameters?: LinkNotificationHubParameters;
}

/** Contains response data for the linkNotificationHub operation. */
export declare type CommunicationServicesLinkNotificationHubResponse = LinkedNotificationHub;

/** Optional parameters. */
export declare interface CommunicationServicesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type CommunicationServicesListByResourceGroupNextResponse = CommunicationServiceResourceList;

/** Optional parameters. */
export declare interface CommunicationServicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type CommunicationServicesListByResourceGroupResponse = CommunicationServiceResourceList;

/** Optional parameters. */
export declare interface CommunicationServicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type CommunicationServicesListBySubscriptionNextResponse = CommunicationServiceResourceList;

/** Optional parameters. */
export declare interface CommunicationServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type CommunicationServicesListBySubscriptionResponse = CommunicationServiceResourceList;

/** Optional parameters. */
export declare interface CommunicationServicesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type CommunicationServicesListKeysResponse = CommunicationServiceKeys;

/**
 * Defines values for CommunicationServicesProvisioningState. \
 * {@link KnownCommunicationServicesProvisioningState} can be used interchangeably with CommunicationServicesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Running** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type CommunicationServicesProvisioningState = string;

/** Optional parameters. */
export declare interface CommunicationServicesRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKey operation. */
export declare type CommunicationServicesRegenerateKeyResponse = CommunicationServiceKeys;

/** Optional parameters. */
export declare interface CommunicationServicesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type CommunicationServicesUpdateResponse = CommunicationServiceResource;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** A class that represents a VerificationStatus record. */
export declare interface DnsRecord {
    /**
     * Type of the DNS record. Example: TXT
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Name of the DNS record.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Value of the DNS record.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * Represents an expiry time in seconds to represent how long this entry can be cached by the resolver, default = 3600sec.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ttl?: number;
}

/**
 * Defines values for DomainManagement. \
 * {@link KnownDomainManagement} can be used interchangeably with DomainManagement,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureManaged** \
 * **CustomerManaged** \
 * **CustomerManagedInExchangeOnline**
 */
export declare type DomainManagement = string;

/** List of DnsRecord */
export declare interface DomainPropertiesVerificationRecords {
    /** A class that represents a VerificationStatus record. */
    domain?: DnsRecord;
    /** A class that represents a VerificationStatus record. */
    spf?: DnsRecord;
    /** A class that represents a VerificationStatus record. */
    dkim?: DnsRecord;
    /** A class that represents a VerificationStatus record. */
    dkim2?: DnsRecord;
    /** A class that represents a VerificationStatus record. */
    dmarc?: DnsRecord;
}

/** List of VerificationStatusRecord */
export declare interface DomainPropertiesVerificationStates {
    /** A class that represents a VerificationStatus record. */
    domain?: VerificationStatusRecord;
    /** A class that represents a VerificationStatus record. */
    spf?: VerificationStatusRecord;
    /** A class that represents a VerificationStatus record. */
    dkim?: VerificationStatusRecord;
    /** A class that represents a VerificationStatus record. */
    dkim2?: VerificationStatusRecord;
    /** A class that represents a VerificationStatus record. */
    dmarc?: VerificationStatusRecord;
}

/** A class representing a Domains resource. */
export declare interface DomainResource extends TrackedResource {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DomainsProvisioningState;
    /**
     * The location where the Domains resource data is stored at rest.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataLocation?: string;
    /**
     * P2 sender domain that is displayed to the email recipients [RFC 5322].
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fromSenderDomain?: string;
    /**
     * P1 sender domain that is present on the email envelope [RFC 5321].
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mailFromSenderDomain?: string;
    /** Describes how a Domains resource is being managed. */
    domainManagement?: DomainManagement;
    /**
     * List of VerificationStatusRecord
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verificationStates?: DomainPropertiesVerificationStates;
    /**
     * List of DnsRecord
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verificationRecords?: DomainPropertiesVerificationRecords;
    /** Describes whether user engagement tracking is enabled or disabled. */
    userEngagementTracking?: UserEngagementTracking;
}

/** Object that includes an array of Domains resource and a possible link for next set. */
export declare interface DomainResourceList {
    /** List of Domains resource */
    value?: DomainResource[];
    /**
     * The URL the client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a Domains. */
export declare interface Domains {
    /**
     * Handles requests to list all Domains resources under the parent EmailServices resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    listByEmailServiceResource(resourceGroupName: string, emailServiceName: string, options?: DomainsListByEmailServiceResourceOptionalParams): PagedAsyncIterableIterator<DomainResource>;
    /**
     * Get the Domains resource and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, emailServiceName: string, domainName: string, options?: DomainsGetOptionalParams): Promise<DomainsGetResponse>;
    /**
     * Add a new Domains resource under the parent EmailService resource or update an existing Domains
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: DomainResource, options?: DomainsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DomainsCreateOrUpdateResponse>, DomainsCreateOrUpdateResponse>>;
    /**
     * Add a new Domains resource under the parent EmailService resource or update an existing Domains
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: DomainResource, options?: DomainsCreateOrUpdateOptionalParams): Promise<DomainsCreateOrUpdateResponse>;
    /**
     * Operation to delete a Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, emailServiceName: string, domainName: string, options?: DomainsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Operation to delete a Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, emailServiceName: string, domainName: string, options?: DomainsDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an existing Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: UpdateDomainRequestParameters, options?: DomainsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DomainsUpdateResponse>, DomainsUpdateResponse>>;
    /**
     * Operation to update an existing Domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: UpdateDomainRequestParameters, options?: DomainsUpdateOptionalParams): Promise<DomainsUpdateResponse>;
    /**
     * Initiate verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be initiated.
     * @param options The options parameters.
     */
    beginInitiateVerification(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: VerificationParameter, options?: DomainsInitiateVerificationOptionalParams): Promise<SimplePollerLike<OperationState<DomainsInitiateVerificationResponse>, DomainsInitiateVerificationResponse>>;
    /**
     * Initiate verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be initiated.
     * @param options The options parameters.
     */
    beginInitiateVerificationAndWait(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: VerificationParameter, options?: DomainsInitiateVerificationOptionalParams): Promise<DomainsInitiateVerificationResponse>;
    /**
     * Cancel verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be canceled.
     * @param options The options parameters.
     */
    beginCancelVerification(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: VerificationParameter, options?: DomainsCancelVerificationOptionalParams): Promise<SimplePollerLike<OperationState<DomainsCancelVerificationResponse>, DomainsCancelVerificationResponse>>;
    /**
     * Cancel verification of DNS record.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param parameters Type of verification to be canceled.
     * @param options The options parameters.
     */
    beginCancelVerificationAndWait(resourceGroupName: string, emailServiceName: string, domainName: string, parameters: VerificationParameter, options?: DomainsCancelVerificationOptionalParams): Promise<DomainsCancelVerificationResponse>;
}

/** Defines headers for Domains_cancelVerification operation. */
export declare interface DomainsCancelVerificationHeaders {
    /** URL to query for status of the operation. */
    location?: string;
}

/** Optional parameters. */
export declare interface DomainsCancelVerificationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the cancelVerification operation. */
export declare type DomainsCancelVerificationResponse = DomainsCancelVerificationHeaders;

/** Defines headers for Domains_createOrUpdate operation. */
export declare interface DomainsCreateOrUpdateHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface DomainsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DomainsCreateOrUpdateResponse = DomainResource;

/** Defines headers for Domains_delete operation. */
export declare interface DomainsDeleteHeaders {
    /** URL to query for status of the operation. */
    location?: string;
}

/** Optional parameters. */
export declare interface DomainsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DomainsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainsGetResponse = DomainResource;

/** Defines headers for Domains_initiateVerification operation. */
export declare interface DomainsInitiateVerificationHeaders {
    /** URL to query for status of the operation. */
    location?: string;
}

/** Optional parameters. */
export declare interface DomainsInitiateVerificationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the initiateVerification operation. */
export declare type DomainsInitiateVerificationResponse = DomainsInitiateVerificationHeaders;

/** Optional parameters. */
export declare interface DomainsListByEmailServiceResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEmailServiceResourceNext operation. */
export declare type DomainsListByEmailServiceResourceNextResponse = DomainResourceList;

/** Optional parameters. */
export declare interface DomainsListByEmailServiceResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByEmailServiceResource operation. */
export declare type DomainsListByEmailServiceResourceResponse = DomainResourceList;

/**
 * Defines values for DomainsProvisioningState. \
 * {@link KnownDomainsProvisioningState} can be used interchangeably with DomainsProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Running** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type DomainsProvisioningState = string;

/** Defines headers for Domains_update operation. */
export declare interface DomainsUpdateHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface DomainsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DomainsUpdateResponse = DomainResource;

/** A class representing an EmailService resource. */
export declare interface EmailServiceResource extends TrackedResource {
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EmailServicesProvisioningState;
    /** The location where the email service stores its data at rest. */
    dataLocation?: string;
}

/** Object that includes an array of EmailServices and a possible link for next set. */
export declare interface EmailServiceResourceList {
    /** List of EmailService */
    value?: EmailServiceResource[];
    /**
     * The URL the client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** A class representing update parameters for EmailService resource. */
export declare interface EmailServiceResourceUpdate extends TaggedResource {
}

/** Interface representing a EmailServices. */
export declare interface EmailServices {
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: EmailServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<EmailServiceResource>;
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: EmailServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<EmailServiceResource>;
    /**
     * Get the EmailService and its properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, emailServiceName: string, options?: EmailServicesGetOptionalParams): Promise<EmailServicesGetResponse>;
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResource, options?: EmailServicesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<EmailServicesCreateOrUpdateResponse>, EmailServicesCreateOrUpdateResponse>>;
    /**
     * Create a new EmailService or update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResource, options?: EmailServicesCreateOrUpdateOptionalParams): Promise<EmailServicesCreateOrUpdateResponse>;
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, emailServiceName: string, options?: EmailServicesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Operation to delete a EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, emailServiceName: string, options?: EmailServicesDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResourceUpdate, options?: EmailServicesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<EmailServicesUpdateResponse>, EmailServicesUpdateResponse>>;
    /**
     * Operation to update an existing EmailService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param parameters Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, emailServiceName: string, parameters: EmailServiceResourceUpdate, options?: EmailServicesUpdateOptionalParams): Promise<EmailServicesUpdateResponse>;
    /**
     * Get a list of domains that are fully verified in Exchange Online.
     * @param options The options parameters.
     */
    listVerifiedExchangeOnlineDomains(options?: EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams): Promise<EmailServicesListVerifiedExchangeOnlineDomainsResponse>;
}

/** Defines headers for EmailServices_createOrUpdate operation. */
export declare interface EmailServicesCreateOrUpdateHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface EmailServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type EmailServicesCreateOrUpdateResponse = EmailServiceResource;

/** Defines headers for EmailServices_delete operation. */
export declare interface EmailServicesDeleteHeaders {
    /** URL to query for status of the operation. */
    location?: string;
}

/** Optional parameters. */
export declare interface EmailServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface EmailServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EmailServicesGetResponse = EmailServiceResource;

/** Optional parameters. */
export declare interface EmailServicesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type EmailServicesListByResourceGroupNextResponse = EmailServiceResourceList;

/** Optional parameters. */
export declare interface EmailServicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type EmailServicesListByResourceGroupResponse = EmailServiceResourceList;

/** Optional parameters. */
export declare interface EmailServicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type EmailServicesListBySubscriptionNextResponse = EmailServiceResourceList;

/** Optional parameters. */
export declare interface EmailServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type EmailServicesListBySubscriptionResponse = EmailServiceResourceList;

/** Optional parameters. */
export declare interface EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVerifiedExchangeOnlineDomains operation. */
export declare type EmailServicesListVerifiedExchangeOnlineDomainsResponse = {
    /** The parsed response body. */
    body: string[];
};

/**
 * Defines values for EmailServicesProvisioningState. \
 * {@link KnownEmailServicesProvisioningState} can be used interchangeably with EmailServicesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Running** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type EmailServicesProvisioningState = string;

/** Defines headers for EmailServices_update operation. */
export declare interface EmailServicesUpdateHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface EmailServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type EmailServicesUpdateResponse = EmailServiceResource;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Defines values for KeyType. */
declare type KeyType_2 = "Primary" | "Secondary";
export { KeyType_2 as KeyType }

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export declare enum KnownCheckNameAvailabilityReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link CommunicationServicesProvisioningState} that the service accepts. */
export declare enum KnownCommunicationServicesProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Running */
    Running = "Running",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DomainManagement} that the service accepts. */
export declare enum KnownDomainManagement {
    /** AzureManaged */
    AzureManaged = "AzureManaged",
    /** CustomerManaged */
    CustomerManaged = "CustomerManaged",
    /** CustomerManagedInExchangeOnline */
    CustomerManagedInExchangeOnline = "CustomerManagedInExchangeOnline"
}

/** Known values of {@link DomainsProvisioningState} that the service accepts. */
export declare enum KnownDomainsProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Running */
    Running = "Running",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link EmailServicesProvisioningState} that the service accepts. */
export declare enum KnownEmailServicesProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Running */
    Running = "Running",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Running */
    Running = "Running",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link UserEngagementTracking} that the service accepts. */
export declare enum KnownUserEngagementTracking {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled"
}

/** Known values of {@link VerificationStatus} that the service accepts. */
export declare enum KnownVerificationStatus {
    /** NotStarted */
    NotStarted = "NotStarted",
    /** VerificationRequested */
    VerificationRequested = "VerificationRequested",
    /** VerificationInProgress */
    VerificationInProgress = "VerificationInProgress",
    /** VerificationFailed */
    VerificationFailed = "VerificationFailed",
    /** Verified */
    Verified = "Verified",
    /** CancellationRequested */
    CancellationRequested = "CancellationRequested"
}

/** Known values of {@link VerificationType} that the service accepts. */
export declare enum KnownVerificationType {
    /** Domain */
    Domain = "Domain",
    /** SPF */
    SPF = "SPF",
    /** Dkim */
    Dkim = "DKIM",
    /** Dkim2 */
    Dkim2 = "DKIM2",
    /** Dmarc */
    Dmarc = "DMARC"
}

/** A notification hub that has been linked to the communication service */
export declare interface LinkedNotificationHub {
    /** The resource ID of the notification hub */
    resourceId?: string;
}

/** Description of an Azure Notification Hub to link to the communication service */
export declare interface LinkNotificationHubParameters {
    /** The resource ID of the notification hub */
    resourceId: string;
    /** Connection string for the notification hub */
    connectionString: string;
}

/** Data POST-ed to the nameAvailability action */
export declare interface NameAvailabilityParameters extends CheckNameAvailabilityRequest {
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available REST API operations of the Microsoft.Communication provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Running** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Parameters describes the request to regenerate access keys */
export declare interface RegenerateKeyParameters {
    /** The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). */
    keyType?: KeyType_2;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** A class representing a SenderUsername resource. */
export declare interface SenderUsernameResource extends ProxyResource {
    /**
     * The location where the SenderUsername resource data is stored at rest.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataLocation?: string;
    /** A sender senderUsername to be used when sending emails. */
    username?: string;
    /** The display name for the senderUsername. */
    displayName?: string;
    /**
     * Provisioning state of the resource. Unknown is the default state for Communication Services.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** A class representing a Domains SenderUsernames collection. */
export declare interface SenderUsernameResourceCollection {
    /** List of SenderUsernames */
    value?: SenderUsernameResource[];
    /** The URL the client should use to fetch the next page (per server side paging). */
    nextLink?: string;
}

/** Interface representing a SenderUsernames. */
export declare interface SenderUsernames {
    /**
     * List all valid sender usernames for a domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param options The options parameters.
     */
    listByDomains(resourceGroupName: string, emailServiceName: string, domainName: string, options?: SenderUsernamesListByDomainsOptionalParams): PagedAsyncIterableIterator<SenderUsernameResource>;
    /**
     * Get a valid sender username for a domains resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, emailServiceName: string, domainName: string, senderUsername: string, options?: SenderUsernamesGetOptionalParams): Promise<SenderUsernamesGetResponse>;
    /**
     * Add a new SenderUsername resource under the parent Domains resource or update an existing
     * SenderUsername resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param parameters Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, emailServiceName: string, domainName: string, senderUsername: string, parameters: SenderUsernameResource, options?: SenderUsernamesCreateOrUpdateOptionalParams): Promise<SenderUsernamesCreateOrUpdateResponse>;
    /**
     * Operation to delete a SenderUsernames resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param senderUsername The valid sender Username.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, emailServiceName: string, domainName: string, senderUsername: string, options?: SenderUsernamesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SenderUsernamesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SenderUsernamesCreateOrUpdateResponse = SenderUsernameResource;

/** Optional parameters. */
export declare interface SenderUsernamesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SenderUsernamesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SenderUsernamesGetResponse = SenderUsernameResource;

/** Optional parameters. */
export declare interface SenderUsernamesListByDomainsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDomainsNext operation. */
export declare type SenderUsernamesListByDomainsNextResponse = SenderUsernameResourceCollection;

/** Optional parameters. */
export declare interface SenderUsernamesListByDomainsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDomains operation. */
export declare type SenderUsernamesListByDomainsResponse = SenderUsernameResourceCollection;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** An ARM resource with that can accept tags */
export declare interface TaggedResource {
    /** Tags of the service which is a list of key value pairs that describe the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** A class that describes the PATCH request parameters of a Domains resource. */
export declare interface UpdateDomainRequestParameters extends TaggedResource {
    /** Describes whether user engagement tracking is enabled or disabled. */
    userEngagementTracking?: UserEngagementTracking;
}

/**
 * Defines values for UserEngagementTracking. \
 * {@link KnownUserEngagementTracking} can be used interchangeably with UserEngagementTracking,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type UserEngagementTracking = string;

/** Input parameter for verification APIs */
export declare interface VerificationParameter {
    /** Type of verification. */
    verificationType: VerificationType;
}

/**
 * Defines values for VerificationStatus. \
 * {@link KnownVerificationStatus} can be used interchangeably with VerificationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **VerificationRequested** \
 * **VerificationInProgress** \
 * **VerificationFailed** \
 * **Verified** \
 * **CancellationRequested**
 */
export declare type VerificationStatus = string;

/** A class that represents a VerificationStatus record. */
export declare interface VerificationStatusRecord {
    /**
     * Status of the verification operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: VerificationStatus;
    /**
     * Error code. This property will only be present if the status is UnableToVerify.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: string;
}

/**
 * Defines values for VerificationType. \
 * {@link KnownVerificationType} can be used interchangeably with VerificationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Domain** \
 * **SPF** \
 * **DKIM** \
 * **DKIM2** \
 * **DMARC**
 */
export declare type VerificationType = string;

export { }
