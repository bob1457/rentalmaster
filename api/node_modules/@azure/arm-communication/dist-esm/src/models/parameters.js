/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { NameAvailabilityParameters as NameAvailabilityParametersMapper, LinkNotificationHubParameters as LinkNotificationHubParametersMapper, CommunicationServiceResourceUpdate as CommunicationServiceResourceUpdateMapper, CommunicationServiceResource as CommunicationServiceResourceMapper, RegenerateKeyParameters as RegenerateKeyParametersMapper, DomainResource as DomainResourceMapper, UpdateDomainRequestParameters as UpdateDomainRequestParametersMapper, VerificationParameter as VerificationParameterMapper, EmailServiceResource as EmailServiceResourceMapper, EmailServiceResourceUpdate as EmailServiceResourceUpdateMapper, SenderUsernameResource as SenderUsernameResourceMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-03-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const nameAvailabilityParameters = {
    parameterPath: "nameAvailabilityParameters",
    mapper: NameAvailabilityParametersMapper
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const linkNotificationHubParameters = {
    parameterPath: ["options", "linkNotificationHubParameters"],
    mapper: LinkNotificationHubParametersMapper
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const communicationServiceName = {
    parameterPath: "communicationServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]+$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "communicationServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: CommunicationServiceResourceUpdateMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: CommunicationServiceResourceMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: RegenerateKeyParametersMapper
};
export const emailServiceName = {
    parameterPath: "emailServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]+$"),
            MaxLength: 63,
            MinLength: 1
        },
        serializedName: "emailServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const domainName = {
    parameterPath: "domainName",
    mapper: {
        constraints: {
            MaxLength: 253,
            MinLength: 1
        },
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: DomainResourceMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: UpdateDomainRequestParametersMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: VerificationParameterMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: EmailServiceResourceMapper
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: EmailServiceResourceUpdateMapper
};
export const senderUsername = {
    parameterPath: "senderUsername",
    mapper: {
        constraints: {
            MaxLength: 253,
            MinLength: 1
        },
        serializedName: "senderUsername",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: SenderUsernameResourceMapper
};
//# sourceMappingURL=parameters.js.map